@inject NavigationManager NavigationManager
@inject ICommandNavigationService CommandService

@* @inject IRenderQueueService RenderQueue *@

<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Large">
        <div id="commandspage">
            <CascadingValue Value="this" IsFixed>
                @ChildContent
            </CascadingValue>
        </div>
        <div class="docs-navigation-footer">
            <NavigationFooter Section=_section Previous="@_previous" Next="@_next" />
        </div>
    </MudContainer>
    @if (DisplayFooter)
    {
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
            <Footer />
        </MudContainer>
    }
    <MudDrawer Class="docs-page-content-navigation-drawer" @bind-Open="_contentDrawerOpen" Breakpoint="Breakpoint.Lg" Anchor="Anchor.End" ClipMode="DrawerClipMode.Always" Elevation="0" Color="Color.Transparent">
        @if (_displayView)
        {
            <MudText Typo="Typo.subtitle1" Class="title" GutterBottom="true">
                Mode
            </MudText>
            <div class="d-flex px-2 mb-2">
                <NavLink class="mode-links mr-2" href="@($"components/{_componentName}")" Match="NavLinkMatch.All">Overview</NavLink>
                <NavLink class="mode-links ml-2" href="@($"api/{_componentName}")" Match="NavLinkMatch.All">API</NavLink>
            </div>
        }
        <MudPageContentNavigation SectionClassSelector="docs-section-header" @ref="_contentNavigation" ActivateFirstSectionAsDefault="true"/>
        @if (_renderAds)
        {
            <MudElement HtmlTag="script" async type="text/javascript" src="//cdn.carbonads.com/carbon.js?serve=CESDLK3E&placement=mudblazorcom" id="_carbonads_js"></MudElement>
        }
    </MudDrawer>
</MudMainContent>

@code {
    [Parameter] public bool DisplayFooter { get; set; }

    // private Queue<DocsSectionLink> _bufferedSections = new();
    private MudPageContentNavigation _contentNavigation;
    private NavigationFooterLink _previous;
    private NavigationFooterLink _next;
    private NavigationSection _section;
    // private Stopwatch _stopwatch = Stopwatch.StartNew();
    private string _anchor = null;
    private bool _displayView;
    private string _componentName;
    private bool _renderAds;

    [Parameter] public RenderFragment ChildContent { get; set; }

    private bool _contentDrawerOpen = true;
    // public event Action<Stopwatch> Rendered;
    // private Dictionary<DocsPageSection, MudPageContentSection> _sectionMapper = new();

    int _sectionCount;

    public int SectionCount
    {
        get
        {
            lock (this)
                return _sectionCount;
        }
    }

    public int IncrementSectionCount()
    {
        lock (this)
            return _sectionCount++;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        // RenderQueue.Clear();
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        if (relativePath.Contains("#") == true)
        {
            _anchor = relativePath.Split(new[] { "#" }, StringSplitOptions.RemoveEmptyEntries)[1];
        }
    }

    // protected override void OnParametersSet()
    // {
    //     _stopwatch = Stopwatch.StartNew();
    //     _sectionCount = 0;
    //     _previous = DocsService.Previous;
    //     _next = DocsService.Next;
    //     _section = DocsService.Section;

    //     /*for after this release is done*/
    //     _displayView = false;
    //     _componentName = "temp";
    //     /*if (NavigationManager.Uri.ToString().Contains("/api/") ||
    //         NavigationManager.Uri.ToString().Contains("/components/"))
    //     {
    //         _componentName = NavigationManager.Uri.ToString().Split('/', StringSplitOptions.RemoveEmptyEntries)
    //             .LastOrDefault();
    //         _displayView = true;
    //     }*/
    // }

    // protected override void OnAfterRender(bool firstRender)
    // {
    //     if (_stopwatch.IsRunning)
    //     {
    //         _stopwatch.Stop();
    //         Rendered?.Invoke(_stopwatch);
    //     }
    //     if (firstRender)
    //     {
    //         _renderAds = true;
    //         StateHasChanged();
    //     }
    // }

    // public string GetParentTitle(DocsPageSection section)
    // {
    //     if (section == null) { return string.Empty; }

    //     if (section == null || section.ParentSection == null ||
    //         _sectionMapper.ContainsKey(section.ParentSection) == false) { return string.Empty; }

    //     var item = _sectionMapper[section.ParentSection];

    //     return item.Title;
    // }

    // internal async void AddSection(DocsSectionLink sectionLinkInfo, DocsPageSection section)
    // {
    //     _bufferedSections.Enqueue(sectionLinkInfo);

    //     if (_contentNavigation != null)
    //     {
    //         while (_bufferedSections.Count > 0)
    //         {
    //             var item = _bufferedSections.Dequeue();

    //             if (_contentNavigation.Sections.FirstOrDefault(x => x.Id == sectionLinkInfo.Id) == default)
    //             {
    //                 MudPageContentSection parentInfo = null;
    //                 if (section.ParentSection != null && _sectionMapper.ContainsKey(section.ParentSection) == true)
    //                 {
    //                     parentInfo = _sectionMapper[section.ParentSection];
    //                 }

    //                 var info =
    //                     new MudPageContentSection(sectionLinkInfo.Title, sectionLinkInfo.Id, section.Level,
    //                         parentInfo);
    //                 _sectionMapper.Add(section, info);
    //                 _contentNavigation.AddSection(info, false);
    //             }
    //         }

    //         ((IMudStateHasChanged)_contentNavigation).StateHasChanged();

    //         if (_anchor != null)
    //         {
    //             if (sectionLinkInfo.Id == _anchor)
    //             {
    //                 await _contentNavigation.ScrollToSection(new Uri(NavigationManager.Uri));
    //                 _anchor = null;
    //             }
    //         }
    //     }
    // }
}