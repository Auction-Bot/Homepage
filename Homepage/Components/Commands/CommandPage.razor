@using System.Diagnostics;
@using MudBlazor.Interfaces;

@inject NavigationManager NavigationManager
@inject ICommandNavigationService CommandService
@inject IRenderQueueService RenderQueue

<MudMainContent>
    <MudContainer MaxWidth="MaxWidth.Large">
        <div id="commandspage">
            <CascadingValue Value="this" IsFixed>
                @ChildContent
            </CascadingValue>
        </div>
        <div class="docs-navigation-footer">
            <NavigationFooter Section=_section Previous="@_previous" Next="@_next" />
        </div>
    </MudContainer>
    @if (DisplayFooter)
    {
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-16">
            <Footer></Footer>
        </MudContainer>
    }
    <MudDrawer Class="page-content-navigation-drawer" @bind-Open="_contentDrawerOpen" Breakpoint="Breakpoint.Lg" Anchor="Anchor.End" ClipMode="DrawerClipMode.Always" Elevation="0" Color="Color.Transparent">
        <MudPageContentNavigation SectionClassSelector="docs-section-header" @ref="_contentNavigation" ActivateFirstSectionAsDefault="true"/>
    </MudDrawer>
</MudMainContent>

@code {
    [Parameter] public bool DisplayFooter { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private MudPageContentNavigation? _contentNavigation;
    private NavigationFooterLink? _previous;
    private NavigationFooterLink? _next;
    private NavigationSection _section;

    private Queue<SectionLink> _bufferedSections = new();
    private Stopwatch _stopwatch = Stopwatch.StartNew();
    private string _componentName = string.Empty;
    private string? _anchor = null;
    private int _sectionCount;
    private bool _contentDrawerOpen = true;

    public event Action<Stopwatch>? Rendered;

    private Dictionary<PageSection, MudPageContentSection> _sectionMapper = new();

    public int SectionCount
    {
        get
        {
            lock (this)
                return _sectionCount;
        }
    }

    public int IncrementSectionCount()
    {
        lock (this)
            return _sectionCount++;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        RenderQueue.Clear();

        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

        if (relativePath.Contains("#"))
            _anchor = relativePath.Split(new[] { "#" }, StringSplitOptions.RemoveEmptyEntries)[1];
    }

    protected override void OnParametersSet()
    {
        _stopwatch = Stopwatch.StartNew();
        _sectionCount = 0;
        _previous = CommandService.Previous;
        _next = CommandService.Next;
        _section = CommandService.Section;
        _componentName = "temp";
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (_stopwatch.IsRunning)
        {
            _stopwatch.Stop();
            Rendered?.Invoke(_stopwatch);
        }
    }

    internal async Task AddSectionAsync(SectionLink sectionLinkInfo, PageSection section)
    {
        _bufferedSections.Enqueue(sectionLinkInfo);

        if (_contentNavigation != null)
        {
            while (_bufferedSections.Count > 0)
            {
                _bufferedSections.Dequeue();

                if (_contentNavigation.Sections.FirstOrDefault(x => x.Id == sectionLinkInfo.Id) != default) continue;
                
                MudPageContentSection? parentInfo = null;

                if (section.ParentSection != null && _sectionMapper.TryGetValue(section.ParentSection, out var value))
                {
                    parentInfo = value;
                }

                var info = new MudPageContentSection(sectionLinkInfo.Title, sectionLinkInfo.Id, section.Level, parentInfo);

                _sectionMapper.Add(section, info);

                _contentNavigation.AddSection(info, false);
            }

            ((IMudStateHasChanged)_contentNavigation).StateHasChanged();

            if (_anchor != null)
            {
                if (sectionLinkInfo.Id == _anchor)
                {
                    await _contentNavigation.ScrollToSection(new Uri(NavigationManager.Uri));
                    _anchor = null;
                }
            }
        }
    }
}